// BASIC PATTERNS

// SUM of column
sum_column = CALCULATE( SUM( table[column] ) )

// Count of column
count_column = CALCULATE( COUNT( table[column] ) )

// Count values in column
countval_column = CALCULATE( COUNTA( table[column] ) )

// Average of column
avg_column = CALCULATE( AVERAGE( table[column] ) )

// Minimum of column
min_column = CALCULATE( MIN( table[column] ) )

// Maximum of column
max_column = CALCULATE( MAX( table[column] ) )

// Divide columns
// Args: Numerator, Denominator, Alternative Result (to catch division errors)
divide_columns =
CALCULATE(
    DIVIDE( table[column], table[column], 0 )
)


// CUMULATIVE PATTERNS

// NOTE: You do not need to redefine calculations if you need to reuse them.
// These CUMULATIVE measures all reference the measures we've already defined.
cumulative = 
CALCULATE (
    [measure],
    FILTER (
        ALL ( dim_date[Date] ),
        dim_date[Date] <= MAX ( dim_date[Date] )
    )
)

// Cumulative sum of column
cume_sum = 
CALCULATE (
    [sum_column],
    FILTER (
        ALL ( dim_date[Date] ),
        dim_date[Date] <= MAX ( dim_date[Date] )
    )
)

// Cumulative count of column
cume_count = 
CALCULATE (
    [count_column],
    FILTER (
        ALL ( dim_date[Date] ),
        dim_date[Date] <= MAX ( dim_date[Date] )
    )
)


// YEAR OVER YEAR PATTERNS

// NOTE: You do not need to redefine calculations if you need to reuse them.
// These YOY measures all reference the measures we've already defined.
yoy = 
CALCULATE(
    [measure],
    SAMEPERIODLASTYEAR(dim_date[Date])
)

// NOTE: To compare the same day from last year, simply subtract a day with
// the DATEADD function. The following measures will compare the same day

// YoY sum of column
yoy_sum = 
CALCULATE(
    [sum_column],
    SAMEPERIODLASTYEAR(
        DATEADD(dim_date[Date], -1, DAY)
    )
)

// YoY count of column
yoy_count = 
CALCULATE(
    [count_column],
    SAMEPERIODLASTYEAR(
        DATEADD(dim_date[Date], -1, DAY)
    )
)


// TIME INTELLIGENCE PATTERNS

// DATEADD
add_a_day_to_date =
DATEADD( dim_date[Date], 1, DAY)

subtract_a_month_from_date =
DATEADD( dim_date[Date], -1, MONTH)

subtract_two_years_from_date =
DATEADD( dim_date[Date], -2, YEAR)


previous_year_figures =
CALCULATE(
    [measure],
    DATEADD( dim_date[Date], -1, YEAR )
)

previous_month_figures =
CALCULATE(
    [measure],
    DATEADD( dim_date[Date], -1, MONTH )
)

previous_day_figures =
CALCULATE(
    [measure],
    DATEADD( dim_date[Date], -1, DAY )
)

// Start of week date
start_of_week_date = dim_date[Date]  - WEEKDAY( dim_date[Date], 2 ) +1
end_of_week_date = dim_date[Date] + 7 - WEEKDAY( dim_date[Date], 2 )


// FPA CALCULATIONS

// Use `VAR` to declare variables
Margin % difference from Forecasted Margin = 
VAR __BASELINE_VALUE = SUM('fact_forecast'[Forecasted Margin])
VAR __VALUE_TO_COMPARE = SUM('fact_bookings'[Margin])
RETURN
	IF(
		NOT ISBLANK(__VALUE_TO_COMPARE),
		DIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)
	)


Revenue % difference from Forecasted Revenue = 
VAR __BASELINE_VALUE = SUM('fact_forecast'[Forecasted Revenue])
VAR __VALUE_TO_COMPARE = SUM('fact_bookings'[Revenue])
RETURN
	IF(
		NOT ISBLANK(__VALUE_TO_COMPARE),
		DIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)
	)


Content	Name	Extension	Date accessed	Date modified	Date created	Attributes	Folder Path	pnr




